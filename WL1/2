from collections import defaultdict
import pandas as pd
import numpy as np
import itertools
import sys
import bisect
import matplotlib.pyplot as plt
import matplotlib.cm as cmx
import matplotlib.colors as cl
import matplotlib.pyplot as pl
import matplotlib.patches as mpatches


def color_maker(count, map='gnuplot2', min=0.100, max=0.900):
     assert(min >= 0.000 and max <= 1.000 and max > min)
     gran=100000.0
     maker = cmx.ScalarMappable(norm=cl.Normalize(vmin=0, vmax=int(gran)), cmap=pl.get_cmap(map))

     r = [min*gran]
     if count > 1:
         r = [min*gran + gran*x*(max-min)/float(count-1) for x in range(0, count)]

     return [maker.to_rgba(t) for t in r]


def add_line(ax, xpos, ypos):
    line = plt.Line2D([xpos, xpos], [ypos + .1, ypos - .1], transform=ax.transAxes, linewidth=1.2, color='black')
    line.set_clip_on(False)
    ax.add_line(line)

#WL1
##user1           = userobj.UserInfo(2500, 43,'PPBBCC','user1')
##list_users.append(user1)
##
##user2       = userobj.UserInfo(1200, 40,'EEFF', 'user2')
##list_users.append(user2)
##
##user3       = userobj.UserInfo(1900, 35,'DDBBCC', 'user3')
##list_users.append(user3)
##
##user4       = userobj.UserInfo(1300, 74,'GGDDEEFF', 'user4')
##list_users.append(user4)
parse_files = [  'ed.txt', 'gs.txt',  'swd.txt',  'tt-1.txt',  'tt-30.txt', 'tt-50.txt',  'tt-dynbatch.txt' ]

final_list = []
data_list = []
for fl in parse_files:
    print fl
    avg_list = []
    tail_list = []

    list_1  = []
    list_12 = []
    list_2  = []
    list_23 = []
    list_3  = []
    list_34  = []
    fList = [s.strip() for s in open('/home/ram/api-as-service/grand-slam/isca-results/5.stacked-bar/grand-slam-sla/WL1/%s' %fl).readlines()]
    max_tail = 0
    data = defaultdict( lambda: defaultdict(lambda: defaultdict( list )))
    for item in fList:
        if 'PP' in item and 'user1' in item:
            list_1.append(float(item.split()[4]))
            list_12.append(float(item.split()[5]))
            data[item.split()[0]][item.split()[1]][item.split()[2]].append(item.split()[7])
        if 'BB' in item  and 'user1' in item:
            list_2.append(float(item.split()[4]))
            list_23.append(float(item.split()[5]))
            data[item.split()[0]][item.split()[1]][item.split()[2]].append(item.split()[7])
        if 'CC' in item and 'user1' in item:
            list_3.append(float(item.split()[4]))
            list_34.append(float(item.split()[5]))
            data[item.split()[0]][item.split()[1]][item.split()[2]].append(item.split()[7])

    print data['PP']['user1']

    #if fl == 'tt-dynbatch.txt':
    #    print item
    #    print list_1
    #    print list_12
    #    print list_2
    #    print list_23
    #    print list_3

    avg_list.append(np.mean(list_12))
    avg_list.append(np.mean(list_1))
    avg_list.append(np.mean(list_23))
    avg_list.append(np.mean(list_2))
    avg_list.append(np.mean(list_34))
    avg_list.append(np.mean(list_3))


    #print avg_list
    final_list.append(avg_list)

#final_tail_list = []
#final_tail_list.append([3904.74057197, 92.9700136184, 28.8108333333, 0.374166666667, 18464.6, 239.8 ])
#final_tail_list.append([, , , , ,  ])
#final_tail_list.append([, , , , ,  ])
#final_tail_list.append([, , , , ,  ])
#final_tail_list.append([, , , , ,  ])
#final_tail_list.append([, , , , ,  ])

#for item in final_list:
#    print item
#print final_list



    #if 'DD' in item:
    #    print item

### data = defaultdict(list )
### WL = ['WL1', 'WL2', 'WL3', 'WL4', 'WL5']
### for item in fList:
###     if 'wl' in item:
###         wlid = item
###     else:
###         data[wlid].append([float(x) for x in item.split(',')])
###
### #for item in data:
### #    #print item
### #    for item2 in data[item]:
### #        print item2
### #        for item3 in item2:
### #            print item3
### #            print float(item3)
###
### xaxis = ['Q1', 'Q2', 'Q3', 'Q4', 'Q5' ]
### print len(data['wl1'][0])
### print len(data['wl1'][1])
### print len(data['wl1'][2])
### print len(data['wl1'][3])
### print len(data['wl1'][4])
###
### a = len(data['wl1'][0])
### print np.arange(a)
### b = np.arange(6,10,1)
### print b
### c = np.arange(11,17,1)
### d = np.arange(18,24,1)
### e = np.arange(25,30,1)
###
###
### color_list = color_maker(7, map="afmhot")
###
### fig = plt.figure(figsize=(12, 3))
### ax = fig.add_subplot(1,1,1)
### width=0.65
###
### down=int(0)
### up = int(300)
### dashes = [5, 3, 5, 3]
###
### line1, = ax.plot( [5.25,5.25,5.25], [down,8,up], 'k--', linewidth=1.2)
### line1.set_dashes(dashes)
### line2, = ax.plot( [10.5, 10.5,10.5], [down,8,up], 'k-', linewidth=1.2)
### line2.set_dashes(dashes)
### line2, = ax.plot( [17.4, 17.4,17.4], [down,8,up], 'k-', linewidth=1.2)
### line2.set_dashes(dashes)
### line2, = ax.plot( [24.45, 24.45, 24.45], [down,8,up], 'k-', linewidth=1.2)
### line2.set_dashes(dashes)
###
###
###
###
### dashes = [10, 5, 10, 5]
### line1, = ax.plot( [0,5.25], [225,225], 'r--', linewidth=2)
### line1.set_dashes(dashes)
### line2, = ax.plot( [5.25, 10.5], [200,200], 'r--', linewidth=2)
### line2.set_dashes(dashes)
### line2, = ax.plot( [10.5, 17.4], [170, 170], 'r-', linewidth=2)
### line2.set_dashes(dashes)
### line2, = ax.plot( [17.4, 24.45], [200,200], 'r-', linewidth=2)
### line2.set_dashes(dashes)
### line2, = ax.plot( [24.45, 30], [160,160], 'r-', linewidth=2)
### line2.set_dashes(dashes)
###
### p1 = plt.bar(np.arange(len(data['wl1'][0])),  data['wl1'][0], width, color=color_list[0])
### p2 = plt.bar(np.arange(len(data['wl1'][1])),  data['wl1'][1], width, bottom=data['wl1'][0], color=color_list[5], label='Queuing Delay')
### p3 = plt.bar(np.arange(len(data['wl1'][2])),  data['wl1'][2], width, bottom=list(map(sum, zip(data['wl1'][0], data['wl1'][1]))), color=color_list[1])
### p4 = plt.bar(np.arange(len(data['wl1'][3])),  data['wl1'][3], width, bottom=list(map(sum, zip(data['wl1'][0], data['wl1'][1],data['wl1'][2]))), color=color_list[5])
### p5 = plt.bar(np.arange(len(data['wl1'][4])),  data['wl1'][4], width, bottom=list(map(sum, zip(data['wl1'][0],data['wl1'][1],data['wl1'][2], data['wl1'][3] ))), color=color_list[2])
###
### p6 = plt.bar(b, data['wl2'][0], width, color=color_list[0])
### p7 = plt.bar(b, data['wl2'][1], width, bottom=data['wl2'][0], color=color_list[5])
### p8 = plt.bar(b, data['wl2'][2], width, bottom=list(map(sum, zip(data['wl2'][0], data['wl2'][1]))), color=color_list[1])
###
###
### p1 = plt.bar(c,  data['wl3'][0], width, color=color_list[0])
### p2 = plt.bar(c,  data['wl3'][1], width, bottom=data['wl3'][0], color=color_list[5])
### p3 = plt.bar(c,  data['wl3'][2], width, bottom=list(map(sum, zip(data['wl3'][0], data['wl3'][1]))), color=color_list[1])
### p4 = plt.bar(c,  data['wl3'][3], width, bottom=list(map(sum, zip(data['wl3'][0], data['wl3'][1],data['wl3'][2]))), color=color_list[5])
### p5 = plt.bar(c,  data['wl3'][4], width, bottom=list(map(sum, zip(data['wl3'][0],data['wl3'][1],data['wl3'][2], data['wl3'][3] ))), color=color_list[2])
### p6 = plt.bar(c,  data['wl3'][5], width, bottom=list(map(sum, zip(data['wl3'][0],data['wl3'][1],data['wl3'][2], data['wl3'][3],data['wl3'][4]))), color='m')
###
### p1 = plt.bar(d,  data['wl4'][0], width, color=color_list[0])
### p2 = plt.bar(d,  data['wl4'][1], width, bottom=data['wl4'][0], color=color_list[5])
### p3 = plt.bar(d,  data['wl4'][2], width, bottom=list(map(sum, zip(data['wl4'][0], data['wl4'][1]))), color=color_list[1])
### p4 = plt.bar(d,  data['wl4'][3], width, bottom=list(map(sum, zip(data['wl4'][0], data['wl4'][1],data['wl4'][2]))), color=color_list[5])
### p5 = plt.bar(d,  data['wl4'][4], width, bottom=list(map(sum, zip(data['wl4'][0],data['wl4'][1],data['wl4'][2], data['wl4'][3] ))), color=color_list[2])
### #p6 = plt.bar(d,  data['wl4'][5],width,  bottom=list(map(sum, zip(data['wl4'][0],data['wl4'][1],data['wl4'][2], data['wl4'][3],data['wl4'][4]))), color='m')
###
###
###
### p1 = plt.bar(e,  data['wl5'][0], width, color=color_list[0])
### p2 = plt.bar(e,  data['wl5'][1], width, bottom=data['wl5'][0], color=color_list[5])
### p3 = plt.bar(e,  data['wl5'][2], width, bottom=list(map(sum, zip(data['wl5'][0], data['wl5'][1]))), color=color_list[1])
### p4 = plt.bar(e,  data['wl5'][3], width, bottom=list(map(sum, zip(data['wl5'][0], data['wl5'][1],data['wl5'][2]))), color=color_list[5])
### p5 = plt.bar(e,  data['wl5'][4], width, bottom=list(map(sum, zip(data['wl5'][0],data['wl5'][1],data['wl5'][2], data['wl5'][3] ))), color=color_list[2])
###
### plt.yticks([0,50,100,150,200,250,300], [0,500,1000,1500,2000,2500,3000], size='10')
### #plt.grid()
### #plt.xticks(np.arange(len(xaxis)), xaxis)
### ax.xaxis.set_major_formatter(plt.NullFormatter())
### add_line(ax, 0 * 1.0, -.1)
### add_line(ax, 1 * 0.175, -.1)
### add_line(ax, 1 * 0.35, -.1)
### add_line(ax, 1 * 0.58, -.1)
### add_line(ax, 1 * 0.815, -.1)
### add_line(ax, 1 * 1, -.1)
### ax.text(2, -50, r'WL1', fontsize=12)
### ax.text(6.5, -50, r'WL2', fontsize=12)
### ax.text(13.5, -50, r'WL3', fontsize=12)
### ax.text(20.5, -50, r'WL4', fontsize=12)
### ax.text(26.5, -50, r'WL5', fontsize=12)
### #plt.ylim(0,300)
### #p = mpatches.Patch(color=color_list[5], alpha=0.5, linewidth=1, ec=color_list[0])
### #p1 = mpatches.Patch(color=color_list[0], alpha=0.5, linewidth=1, ec=color_list[0])
### #p2 = mpatches.Patch(color=color_list[1], alpha=0.5, linewidth=1, ec=color_list[0])
### #plt.legend((p,), ('Queuing Delay',), (p1,p2,) ('blah'))
### m1, = ax.plot([], [], c='red' , marker='s', markersize=20,
###                       fillstyle='left', linestyle='none')
###
### m2, = ax.plot([], [], c=color_list[5] , marker='s', markersize=20,
###                        linestyle='none')
###
### #---- Define Second Legend Entry ----
###
### m3, = ax.plot([], [], c=color_list[0] , marker='s', markersize=20,
###                       fillstyle='left', linestyle='none')
###
### m4, = ax.plot([], [], c=color_list[1] , marker='s', markersize=20,
###                       fillstyle='right', linestyle='none')
###
### m5, = ax.plot([], [], c=color_list[2] , marker='s', markersize=20,
###                       fillstyle='bottom', linestyle='none')
###
### m6, = ax.plot([], [], c=color_list[3] , marker='s', markersize=20,
###                       fillstyle='right', linestyle='none')
###
### #---- Plot Legend ----
###
### ax.legend(((m2), (m3, m4, m5)), ('Queuing Delay', 'Compute Delay'), numpoints=1, labelspacing=2,
###                   loc='upper right', fontsize=16, ncol=2)
###
###
### plt.ylabel('Latency\nStage Wise')
### #plt.title('Scores by group and gender')
### plt.savefig('done2.png', bbox_inches='tight',  dpi=125)
